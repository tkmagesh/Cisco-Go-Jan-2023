Magesh Kuppan

Schedule:
    Commence    : 9:00 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 12:00 PM (1 hr)
    Tea Break   : 2:30 PM (20 mins)
    Wind up     : 5:00 PM

Methodology:
    * No powerpoints
    * 100% hands on

Repo:
    https://github.com/tkmagesh/Cisco-Go-Jan-2023

Software Requirements:
    * Go Tools (https://go.dev/dl)
    * Visual Studio Code (https://code.visualstudio.com/download)
    * Go extends for Visual Studio Code (https://marketplace.visualstudio.com/items?itemName=golang.Go)
    * GIT client

Agenda:
    Day:01
        Intro, Data Types, Constructs, functions, error handling, deferred functions
    Day:02
        Collections, structs, methods, interfaces, type assertion, modules & packages
    Day:03
        Concurrency, HTTP Services (Overview)

Why Go?
    1. Simplicity
        ONLY 25 keywords
        - No access modifiers (private, public, protected etc)
        - No classes (only Struct)
        - No inheritence (only composition)
        - No reference types (everything is a value in Go)
        - No exceptions (only errors)
        - No "try catch finally" construct
        - No pointer arithmetic
        - No implicit type conversion

    2. Lightweight
        - Close to hardware
        - No VMs, No JIT compilation
        - Tooling support for cross compilation
        - Performance is equivalent to C++
        
    3. Concurrency
        - light weight concurrency model
        - Concurrency features are built in the language
            ex: go keyword, channel data type, range keyword, select case construct
        - Standard Library
            sync package
            sync/atomic package

Paradox of Choice (Barry Schwatz)

Run Go program:
    go run <filename.go>

Compile Go program:
    go build <filename.go>

To list all the environment variables
    go env

To get the values of specific env variables
    go env <var_1> <var_2> .....

To change the env variables
    go env -w <var_1>=<val_1> <var_2>=<val_2> ....

To get the list of platforms for cross compilation
    go tool dist list

Env variables for cross compilation
    GOARCH
    GOOS

To cross compile
    GOOS=<target_os> GOARCH=<target_arch> go build <filename.go>
    ex:
        GOOS=windows GOARCH=386 go build program.go

Data Types
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real[float32] imaginary[float32])
    complex128 (real[float64] imaginary[float64])

    byte (alias for uint8)
    rune (alias for int32) (unicode code point)

Differences between function scope & package scope
    Function Scope:
        Can use ":="
        Cannot have unused variables

    Package Scope:
        Cannot use ":="
        Can have unused variables

Constants
    Can have unused constants (both in function & package scope)

Constructs
    if else
    switch case
    for

Functions
    - Can have more than one return results
    - Supports variadic functions
    - Anonymous functions
    - Higher Order Functions
        - functions can be assigned as values to variables
        - functions can be passed as arguments
        - functions can be returned as results

Errors
    Just values
    Errors are returned from a function (not "thrown")
    
    Convention:
        error objects implements "error" interface

    Creation:
        errors.New()
        fmt.Errorf()