Magesh Kuppan

Schedule:
    Commence    : 9:00 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 12:00 PM (1 hr)
    Tea Break   : 2:30 PM (20 mins)
    Wind up     : 5:00 PM

Methodology:
    * No powerpoints
    * 100% hands on

Repo:
    https://github.com/tkmagesh/Cisco-Go-Jan-2023

Software Requirements:
    * Go Tools (https://go.dev/dl)
    * Visual Studio Code (https://code.visualstudio.com/download)
    * Go extends for Visual Studio Code (https://marketplace.visualstudio.com/items?itemName=golang.Go)
    * GIT client

Agenda:
    Day:01
        Intro, Data Types, Constructs, functions, error handling, deferred functions
    Day:02
        Collections, structs, methods, interfaces, type assertion, modules & packages
    Day:03
        Concurrency, HTTP Services (Overview)

Why Go?
    1. Simplicity
        ONLY 25 keywords
        - No access modifiers (private, public, protected etc)
        - No classes (only Struct)
        - No inheritence (only composition)
        - No reference types (everything is a value in Go)
        - No exceptions (only errors)
        - No "try catch finally" construct
        - No pointer arithmetic
        - No implicit type conversion

    2. Lightweight
        - Close to hardware
        - No VMs, No JIT compilation
        - Tooling support for cross compilation
        - Performance is equivalent to C++
        
    3. Concurrency
        - light weight concurrency model
        - Concurrency features are built in the language
            ex: go keyword, channel data type, range keyword, select case construct
        - Standard Library
            sync package
            sync/atomic package

Paradox of Choice (Barry Schwatz)

Run Go program:
    go run <filename.go>

Compile Go program:
    go build <filename.go>

To list all the environment variables
    go env

To get the values of specific env variables
    go env <var_1> <var_2> .....

To change the env variables
    go env -w <var_1>=<val_1> <var_2>=<val_2> ....

To get the list of platforms for cross compilation
    go tool dist list

Env variables for cross compilation
    GOARCH
    GOOS

To cross compile
    GOOS=<target_os> GOARCH=<target_arch> go build <filename.go>
    ex:
        GOOS=windows GOARCH=386 go build program.go

Data Types
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real[float32] imaginary[float32])
    complex128 (real[float64] imaginary[float64])

    byte (alias for uint8)
    rune (alias for int32) (unicode code point)

Differences between function scope & package scope
    Function Scope:
        Can use ":="
        Cannot have unused variables

    Package Scope:
        Cannot use ":="
        Can have unused variables

Constants
    Can have unused constants (both in function & package scope)

Constructs
    if else
    switch case
    for

Functions
    - Can have more than one return results
    - Supports variadic functions
    - Anonymous functions
    - Higher Order Functions
        - functions can be assigned as values to variables
        - functions can be passed as arguments
        - functions can be returned as results

Errors
    Just values
    Errors are returned from a function (not "thrown")
    
    Convention:
        error objects implements "error" interface
        error should be the last value in the list of return results

    Creation:
        errors.New()
        fmt.Errorf()

Panic & Recovery

Collection
    Array
        Fixed size typed collection
    Slice
        Varying size typed collection
    Map
        typed key/value collection

make() function
    - create a slice
    - create a map
    - create a channel

Modularity
    Module (introduced in Go 1.13)
        - any code that has to be versioned & deployed together
        - go.mod (module file)
            module name
                (convention : repo path)
            minimum go runtime version
    
    Package
        - internal organization of the logic

    Before Go 1.13
        GOPATH
            /bin
                3rd party go binaries are installed
            /pkg
                source code for any 3rd party packages
            /src
                /github.com
                    /tkmagesh
                        /cisco-go-jan-2023
                            /10-modularity
                                app.go 
                                    imports "github.com/tkmagesh/cisco-go-jan-2023/10-modularity/utils"
                                /utils
                                    utils.go

    To create a module
        go mod init <module_name>
    
    To run a module
        go run .

    to create a build of a module
        go build .
        go build -o <binary_name> .

    to use a 3rd party Package
        go get <package_name>
        ex: 
            go get github.com/fatih/color

    to update the go.mod file
        go mod tidy

    to localize the dependencies
        go mod vendor

    to consider the vendor folder
        go [run, build] -mod=vendor
    
    to consider the module cache (GOPATH/pkg) folder
        go [run, build] -mod=mod

    to install 3rd party go tools (GOPATH/bin folder)
        go install <package_name>

    other useful commands
        go mod why
        go mod graph

    
    
    Reference :
        https://go.dev/ref/mod

Structs
    - value types

Interfaces
    - "Implicitly" implemented

Concurrency:
    Concurrency != Parallelism

    "Ability to have more than one execution path"

    Detecting Data Races
        go run --race <filename.go>
        go build --race <filename.go> // IMPORTANT : DONOT create a production build with a race detector